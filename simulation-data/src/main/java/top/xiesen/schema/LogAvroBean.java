/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package top.xiesen.schema;

import org.apache.avro.specific.SpecificData;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

import java.util.Map;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class LogAvroBean extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -4156668162689168166L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"LogAvroBean\",\"namespace\":\"top.xiesen.schema\",\"fields\":[{\"name\":\"logTypeName\",\"type\":\"string\"},{\"name\":\"timestamp\",\"type\":\"string\"},{\"name\":\"source\",\"type\":\"string\"},{\"name\":\"offset\",\"type\":\"string\"},{\"name\":\"dimensions\",\"type\":{\"type\":\"map\",\"values\":\"string\"}},{\"name\":\"measures\",\"type\":{\"type\":\"map\",\"values\":\"double\"}},{\"name\":\"normalFields\",\"type\":{\"type\":\"map\",\"values\":\"string\"}}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();

  private static final BinaryMessageEncoder<LogAvroBean> ENCODER =
      new BinaryMessageEncoder<LogAvroBean>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<LogAvroBean> DECODER =
      new BinaryMessageDecoder<LogAvroBean>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   */
  public static BinaryMessageDecoder<LogAvroBean> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   */
  public static BinaryMessageDecoder<LogAvroBean> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<LogAvroBean>(MODEL$, SCHEMA$, resolver);
  }

  /** Serializes this LogAvroBean to a ByteBuffer. */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /** Deserializes a LogAvroBean from a ByteBuffer. */
  public static LogAvroBean fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

  @Deprecated public java.lang.CharSequence logTypeName;
  @Deprecated public java.lang.CharSequence timestamp;
  @Deprecated public java.lang.CharSequence source;
  @Deprecated public java.lang.CharSequence offset;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> dimensions;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.Double> measures;
  @Deprecated public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> normalFields;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public LogAvroBean() {}

  /**
   * All-args constructor.
   * @param logTypeName The new value for logTypeName
   * @param timestamp The new value for timestamp
   * @param source The new value for source
   * @param offset The new value for offset
   * @param dimensions The new value for dimensions
   * @param measures The new value for measures
   * @param normalFields The new value for normalFields
   */
  public LogAvroBean(CharSequence logTypeName, CharSequence timestamp, CharSequence source, CharSequence offset, Map<CharSequence, CharSequence> dimensions, Map<CharSequence, Double> measures, Map<CharSequence, CharSequence> normalFields) {
    this.logTypeName = logTypeName;
    this.timestamp = timestamp;
    this.source = source;
    this.offset = offset;
    this.dimensions = dimensions;
    this.measures = measures;
    this.normalFields = normalFields;
  }

  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return logTypeName;
    case 1: return timestamp;
    case 2: return source;
    case 3: return offset;
    case 4: return dimensions;
    case 5: return measures;
    case 6: return normalFields;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: logTypeName = (java.lang.CharSequence)value$; break;
    case 1: timestamp = (java.lang.CharSequence)value$; break;
    case 2: source = (java.lang.CharSequence)value$; break;
    case 3: offset = (java.lang.CharSequence)value$; break;
    case 4: dimensions = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    case 5: measures = (java.util.Map<java.lang.CharSequence,java.lang.Double>)value$; break;
    case 6: normalFields = (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>)value$; break;
    default: throw new org.apache.avro.AvroRuntimeException("Bad index");
    }
  }

  /**
   * Gets the value of the 'logTypeName' field.
   * @return The value of the 'logTypeName' field.
   */
  public java.lang.CharSequence getLogTypeName() {
    return logTypeName;
  }

  /**
   * Sets the value of the 'logTypeName' field.
   * @param value the value to set.
   */
  public void setLogTypeName(java.lang.CharSequence value) {
    this.logTypeName = value;
  }

  /**
   * Gets the value of the 'timestamp' field.
   * @return The value of the 'timestamp' field.
   */
  public java.lang.CharSequence getTimestamp() {
    return timestamp;
  }

  /**
   * Sets the value of the 'timestamp' field.
   * @param value the value to set.
   */
  public void setTimestamp(java.lang.CharSequence value) {
    this.timestamp = value;
  }

  /**
   * Gets the value of the 'source' field.
   * @return The value of the 'source' field.
   */
  public java.lang.CharSequence getSource() {
    return source;
  }

  /**
   * Sets the value of the 'source' field.
   * @param value the value to set.
   */
  public void setSource(java.lang.CharSequence value) {
    this.source = value;
  }

  /**
   * Gets the value of the 'offset' field.
   * @return The value of the 'offset' field.
   */
  public java.lang.CharSequence getOffset() {
    return offset;
  }

  /**
   * Sets the value of the 'offset' field.
   * @param value the value to set.
   */
  public void setOffset(java.lang.CharSequence value) {
    this.offset = value;
  }

  /**
   * Gets the value of the 'dimensions' field.
   * @return The value of the 'dimensions' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getDimensions() {
    return dimensions;
  }

  /**
   * Sets the value of the 'dimensions' field.
   * @param value the value to set.
   */
  public void setDimensions(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.dimensions = value;
  }

  /**
   * Gets the value of the 'measures' field.
   * @return The value of the 'measures' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.Double> getMeasures() {
    return measures;
  }

  /**
   * Sets the value of the 'measures' field.
   * @param value the value to set.
   */
  public void setMeasures(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
    this.measures = value;
  }

  /**
   * Gets the value of the 'normalFields' field.
   * @return The value of the 'normalFields' field.
   */
  public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getNormalFields() {
    return normalFields;
  }

  /**
   * Sets the value of the 'normalFields' field.
   * @param value the value to set.
   */
  public void setNormalFields(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
    this.normalFields = value;
  }

  /**
   * Creates a new LogAvroBean RecordBuilder.
   * @return A new LogAvroBean RecordBuilder
   */
  public static top.xiesen.schema.LogAvroBean.Builder newBuilder() {
    return new top.xiesen.schema.LogAvroBean.Builder();
  }

  /**
   * Creates a new LogAvroBean RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new LogAvroBean RecordBuilder
   */
  public static top.xiesen.schema.LogAvroBean.Builder newBuilder(top.xiesen.schema.LogAvroBean.Builder other) {
    return new top.xiesen.schema.LogAvroBean.Builder(other);
  }

  /**
   * Creates a new LogAvroBean RecordBuilder by copying an existing LogAvroBean instance.
   * @param other The existing instance to copy.
   * @return A new LogAvroBean RecordBuilder
   */
  public static top.xiesen.schema.LogAvroBean.Builder newBuilder(top.xiesen.schema.LogAvroBean other) {
    return new top.xiesen.schema.LogAvroBean.Builder(other);
  }

  /**
   * RecordBuilder for LogAvroBean instances.
   */
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<LogAvroBean>
    implements org.apache.avro.data.RecordBuilder<LogAvroBean> {

    private java.lang.CharSequence logTypeName;
    private java.lang.CharSequence timestamp;
    private java.lang.CharSequence source;
    private java.lang.CharSequence offset;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> dimensions;
    private java.util.Map<java.lang.CharSequence,java.lang.Double> measures;
    private java.util.Map<java.lang.CharSequence,java.lang.CharSequence> normalFields;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(top.xiesen.schema.LogAvroBean.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.logTypeName)) {
        this.logTypeName = data().deepCopy(fields()[0].schema(), other.logTypeName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.source)) {
        this.source = data().deepCopy(fields()[2].schema(), other.source);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.offset)) {
        this.offset = data().deepCopy(fields()[3].schema(), other.offset);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dimensions)) {
        this.dimensions = data().deepCopy(fields()[4].schema(), other.dimensions);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.measures)) {
        this.measures = data().deepCopy(fields()[5].schema(), other.measures);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.normalFields)) {
        this.normalFields = data().deepCopy(fields()[6].schema(), other.normalFields);
        fieldSetFlags()[6] = true;
      }
    }

    /**
     * Creates a Builder by copying an existing LogAvroBean instance
     * @param other The existing instance to copy.
     */
    private Builder(top.xiesen.schema.LogAvroBean other) {
            super(SCHEMA$);
      if (isValidValue(fields()[0], other.logTypeName)) {
        this.logTypeName = data().deepCopy(fields()[0].schema(), other.logTypeName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.timestamp)) {
        this.timestamp = data().deepCopy(fields()[1].schema(), other.timestamp);
        fieldSetFlags()[1] = true;
      }
      if (isValidValue(fields()[2], other.source)) {
        this.source = data().deepCopy(fields()[2].schema(), other.source);
        fieldSetFlags()[2] = true;
      }
      if (isValidValue(fields()[3], other.offset)) {
        this.offset = data().deepCopy(fields()[3].schema(), other.offset);
        fieldSetFlags()[3] = true;
      }
      if (isValidValue(fields()[4], other.dimensions)) {
        this.dimensions = data().deepCopy(fields()[4].schema(), other.dimensions);
        fieldSetFlags()[4] = true;
      }
      if (isValidValue(fields()[5], other.measures)) {
        this.measures = data().deepCopy(fields()[5].schema(), other.measures);
        fieldSetFlags()[5] = true;
      }
      if (isValidValue(fields()[6], other.normalFields)) {
        this.normalFields = data().deepCopy(fields()[6].schema(), other.normalFields);
        fieldSetFlags()[6] = true;
      }
    }

    /**
      * Gets the value of the 'logTypeName' field.
      * @return The value.
      */
    public java.lang.CharSequence getLogTypeName() {
      return logTypeName;
    }

    /**
      * Sets the value of the 'logTypeName' field.
      * @param value The value of 'logTypeName'.
      * @return This builder.
      */
    public top.xiesen.schema.LogAvroBean.Builder setLogTypeName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.logTypeName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'logTypeName' field has been set.
      * @return True if the 'logTypeName' field has been set, false otherwise.
      */
    public boolean hasLogTypeName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'logTypeName' field.
      * @return This builder.
      */
    public top.xiesen.schema.LogAvroBean.Builder clearLogTypeName() {
      logTypeName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'timestamp' field.
      * @return The value.
      */
    public java.lang.CharSequence getTimestamp() {
      return timestamp;
    }

    /**
      * Sets the value of the 'timestamp' field.
      * @param value The value of 'timestamp'.
      * @return This builder.
      */
    public top.xiesen.schema.LogAvroBean.Builder setTimestamp(java.lang.CharSequence value) {
      validate(fields()[1], value);
      this.timestamp = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'timestamp' field has been set.
      * @return True if the 'timestamp' field has been set, false otherwise.
      */
    public boolean hasTimestamp() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'timestamp' field.
      * @return This builder.
      */
    public top.xiesen.schema.LogAvroBean.Builder clearTimestamp() {
      timestamp = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    /**
      * Gets the value of the 'source' field.
      * @return The value.
      */
    public java.lang.CharSequence getSource() {
      return source;
    }

    /**
      * Sets the value of the 'source' field.
      * @param value The value of 'source'.
      * @return This builder.
      */
    public top.xiesen.schema.LogAvroBean.Builder setSource(java.lang.CharSequence value) {
      validate(fields()[2], value);
      this.source = value;
      fieldSetFlags()[2] = true;
      return this;
    }

    /**
      * Checks whether the 'source' field has been set.
      * @return True if the 'source' field has been set, false otherwise.
      */
    public boolean hasSource() {
      return fieldSetFlags()[2];
    }


    /**
      * Clears the value of the 'source' field.
      * @return This builder.
      */
    public top.xiesen.schema.LogAvroBean.Builder clearSource() {
      source = null;
      fieldSetFlags()[2] = false;
      return this;
    }

    /**
      * Gets the value of the 'offset' field.
      * @return The value.
      */
    public java.lang.CharSequence getOffset() {
      return offset;
    }

    /**
      * Sets the value of the 'offset' field.
      * @param value The value of 'offset'.
      * @return This builder.
      */
    public top.xiesen.schema.LogAvroBean.Builder setOffset(java.lang.CharSequence value) {
      validate(fields()[3], value);
      this.offset = value;
      fieldSetFlags()[3] = true;
      return this;
    }

    /**
      * Checks whether the 'offset' field has been set.
      * @return True if the 'offset' field has been set, false otherwise.
      */
    public boolean hasOffset() {
      return fieldSetFlags()[3];
    }


    /**
      * Clears the value of the 'offset' field.
      * @return This builder.
      */
    public top.xiesen.schema.LogAvroBean.Builder clearOffset() {
      offset = null;
      fieldSetFlags()[3] = false;
      return this;
    }

    /**
      * Gets the value of the 'dimensions' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getDimensions() {
      return dimensions;
    }

    /**
      * Sets the value of the 'dimensions' field.
      * @param value The value of 'dimensions'.
      * @return This builder.
      */
    public top.xiesen.schema.LogAvroBean.Builder setDimensions(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[4], value);
      this.dimensions = value;
      fieldSetFlags()[4] = true;
      return this;
    }

    /**
      * Checks whether the 'dimensions' field has been set.
      * @return True if the 'dimensions' field has been set, false otherwise.
      */
    public boolean hasDimensions() {
      return fieldSetFlags()[4];
    }


    /**
      * Clears the value of the 'dimensions' field.
      * @return This builder.
      */
    public top.xiesen.schema.LogAvroBean.Builder clearDimensions() {
      dimensions = null;
      fieldSetFlags()[4] = false;
      return this;
    }

    /**
      * Gets the value of the 'measures' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.Double> getMeasures() {
      return measures;
    }

    /**
      * Sets the value of the 'measures' field.
      * @param value The value of 'measures'.
      * @return This builder.
      */
    public top.xiesen.schema.LogAvroBean.Builder setMeasures(java.util.Map<java.lang.CharSequence,java.lang.Double> value) {
      validate(fields()[5], value);
      this.measures = value;
      fieldSetFlags()[5] = true;
      return this;
    }

    /**
      * Checks whether the 'measures' field has been set.
      * @return True if the 'measures' field has been set, false otherwise.
      */
    public boolean hasMeasures() {
      return fieldSetFlags()[5];
    }


    /**
      * Clears the value of the 'measures' field.
      * @return This builder.
      */
    public top.xiesen.schema.LogAvroBean.Builder clearMeasures() {
      measures = null;
      fieldSetFlags()[5] = false;
      return this;
    }

    /**
      * Gets the value of the 'normalFields' field.
      * @return The value.
      */
    public java.util.Map<java.lang.CharSequence,java.lang.CharSequence> getNormalFields() {
      return normalFields;
    }

    /**
      * Sets the value of the 'normalFields' field.
      * @param value The value of 'normalFields'.
      * @return This builder.
      */
    public top.xiesen.schema.LogAvroBean.Builder setNormalFields(java.util.Map<java.lang.CharSequence,java.lang.CharSequence> value) {
      validate(fields()[6], value);
      this.normalFields = value;
      fieldSetFlags()[6] = true;
      return this;
    }

    /**
      * Checks whether the 'normalFields' field has been set.
      * @return True if the 'normalFields' field has been set, false otherwise.
      */
    public boolean hasNormalFields() {
      return fieldSetFlags()[6];
    }


    /**
      * Clears the value of the 'normalFields' field.
      * @return This builder.
      */
    public top.xiesen.schema.LogAvroBean.Builder clearNormalFields() {
      normalFields = null;
      fieldSetFlags()[6] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public LogAvroBean build() {
      try {
        LogAvroBean record = new LogAvroBean();
        record.logTypeName = fieldSetFlags()[0] ? this.logTypeName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.timestamp = fieldSetFlags()[1] ? this.timestamp : (java.lang.CharSequence) defaultValue(fields()[1]);
        record.source = fieldSetFlags()[2] ? this.source : (java.lang.CharSequence) defaultValue(fields()[2]);
        record.offset = fieldSetFlags()[3] ? this.offset : (java.lang.CharSequence) defaultValue(fields()[3]);
        record.dimensions = fieldSetFlags()[4] ? this.dimensions : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[4]);
        record.measures = fieldSetFlags()[5] ? this.measures : (java.util.Map<java.lang.CharSequence,java.lang.Double>) defaultValue(fields()[5]);
        record.normalFields = fieldSetFlags()[6] ? this.normalFields : (java.util.Map<java.lang.CharSequence,java.lang.CharSequence>) defaultValue(fields()[6]);
        return record;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<LogAvroBean>
    WRITER$ = (org.apache.avro.io.DatumWriter<LogAvroBean>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<LogAvroBean>
    READER$ = (org.apache.avro.io.DatumReader<LogAvroBean>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}
